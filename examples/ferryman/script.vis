/*
    Visualizing a game state in the river crossing problem.
*/

// Generation of shorthand predicates to quickly address node and edge labels
node labels:
    "wolf",
    "Goat" as goat,
    "Cabbage" as cabbage,
    "Boat" as boat,
    "Bank" as bank.

edge labels:
    "on",
    "in",
    "likes",
    "moored",
    "go".

// Environment
backgroundImage("examples/ferryman/images/river.png").

shape(water, rectangle).
colour(water, blue).
dimensions(water, 40, 8).

// Passengers
wolf(X); goat(X); cabbage(X) ->
    passenger(X),
    dimensions(X, 4, 4).

passenger(X), passenger(Y) ->
    noOverlap(X, Y).

wolf(X) ->
    image(X, "examples/ferryman/images/wolf.png").

goat(X) ->
    image(X, "examples/ferryman/images/sheep.png").

cabbage(X) ->
    image(X, "examples/ferryman/images/cabbage.png").

// Boats & banks
boat(X) ->
    image(X, "examples/ferryman/images/boat front.png"),
    image([X, back], "examples/ferryman/images/boat back.png"),
    dimensions(X, 16, 6),
    dimensions([X, back], 16, 6),
    align(X, [X, back]),
    enclosedHorizontal(X, water),
    above(X, water, -3),
    before(X, water).

bank(X) ->
    shape(X, rectangle),
    colour(X, green),
    alignBottom(X, water).

bank(X), bank(Y) ->
    sameWidth(X, Y).

boat(X), bank(Y) ->
    alignTop(X, Y).

bank(X), attribute(X, "flag", "left") ->
    left(X, water, 0).

bank(X), attribute(X, "flag", "right") ->
    right(X, water, 0).

// Visualizing placement edges
on(Passenger, Bank) ->
    above(Passenger, Bank, -2),
    enclosedHorizontal(Passenger, Bank),
    before(Passenger, Bank).

in(Passenger, Boat) ->
    above(Passenger, Boat, -3),
    enclosedHorizontal(Passenger, Boat),
    alignHorizontal(Passenger, Boat),
    behind(Passenger, Boat),
    before(Passenger, [Boat, back]).

moored(Boat, Bank); go(Boat, Bank) ->
    horizontalDistance(Boat, Bank, 0).

// Visualizing "likes" edges: legend
shape(legend, rectangle).
colour(legend, lightpink).
above(legend, water, 8).
alignLeft(legend, water).
zPos(legend, -1).

passenger(X), image(X, Path) ->
    image([X, mini], Path), dimensions([X, mini], 2, 2).

likes(X, Y, Z) ->
    image(Z, "examples/ferryman/images/heart.png"),
    dimensions(Z, 2, 2),
    left([X, mini], Z, 0),
    left(Z, [Y, mini], 0),
    alignVertical([X, mini], Z),
    alignVertical(Z, [Y, mini]),
    enclosed([X, mini], legend),
    enclosed([Y, mini], legend),
    enclosed(Z, legend).


